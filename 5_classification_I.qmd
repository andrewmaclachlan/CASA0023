# Classification I

## Google Earth Engine

For this week we are going to move away form R and focus on Google Earth Engine, which is still quite new for me too.

Google Earth Engine (GEE) is a platform that let's us analyse data that is stored remotely, each time we write some code it is sent to a server to be evaluated and the results are returned to us. As we don't compute locally it speeds all of our processes up!

GEE uses Javascript...and according to the GEE team this is all of the Javascript you need to know:

```{r, eval=FALSE}
// All the javascript you need to know (almost)

var number = 1

var string = 'Hello, World!'

var list = [1.23, 8, -3]
print(list[2])

var dictionary = {
  a: 'Hello',
  b: 10,
  c: 0.1343,
  d: list
}

print(dictionary.b)
print(number, string, list, dictionary)
```

To start with GEE i want to pull up the same image from a specific date for a city, i will use 

We can make a new point in the code editor with:
```{r, eval=FALSE}
// Construct a point from coordinates.
var point = ee.Geometry.Point([77.216721, 28.644800]);

```

## Points

In this case my city is Dheli, when i enter this code you will get a message asking if you want to convert it to an imported record, click convert and it will appear in the imports...

Alternatively we can click the point icon on the map and add a new point...> new layer > give an suitable name

```{r echo=FALSE, out.width = "900px", fig.align='center', cache=FALSE}
knitr::include_graphics('prac_5/GEE_points.png') 
```
To center the map on this point...where the second argument is the zoom level

```{r, eval=FALSE}
Map.centerObject(Dheli, 10)
```

## Landsat data

Now we need to load some surface reflectance data > browse data catalogue > click through to a Landsat surface reflectance dataset, Collection 2 and tier 1. You will see the code to import the data to your script and if you click the open window icon you can see an example...

```{r echo=FALSE, out.width = "900px", fig.align='center', cache=FALSE}
knitr::include_graphics('prac_5/GEE_data_catalogue.png') 
```

Here through let's just load some data...

```{r, eval=FALSE}
var dataset = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')
    .filterDate('2022-01-01', '2022-02-01');
```

This doesn't do anything until we actually add it to our map....

```{r, eval=FALSE}
Map.addLayer(dataset, {bands: ["SR_B4", "SR_B3", "SR_B2"]})

```

What has this actually done? Try zooming out and inspecting the image. On the right hand side click inspector and click around the image...

At the moment we aren't sure exactly what images we are using or how much cloud cover is in them...to sort this...

**Note**, that in GEE `//` comments out a line of code...

```{r, eval=FALSE}
// Load Landsat 8 data, filter by date, month, and bounds.
var dataset = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')
  .filterDate('2020-01-01', '2022-10-10')
 // .filter(ee.Filter.calendarRange(1, 2, 'month'))  // Jan and Feb images
  .filterBounds(Dheli);  // Intersecting ROI

var filtered = dataset.filter(ee.Filter.eq('CLOUD_COVER', 0));

print(filtered)

```

## Problems

In my case this provides three images...and if we wanted to export the metadata of these images we could using...

```{r, eval=FALSE}
Export.table.toDrive(filtered, 'exportAsCSV', 'GEE', 'CSVexport', 'CSV');
```

Now I have two problems:

* The collection has three images within it and when i display it `Map.addLayer(filtered, {bands: ["SR_B4", "SR_B3", "SR_B2"]})` we get the top most image.

* The image only covers my single point and not the whole of Dehli / the administration area.

### Polygons

Let's deal with problem two first...

* I could either just change my point to a shape that i can draw. Next to the point icon (in the map/layer window) there is a polygon icon.

* I can upload a file, such as one from [GADM](https://gadm.org/index.html) 

### Single images 

Now problem one...

* I could just select a single image from the collection by filtering using the specific date, which you can get from the console window when printing the images within the collection. Landsat (and most other EO datasets) have the date within the file path name, this is....`LC09_147040_20220403`

```{r, eval=FALSE}
var oneimage = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')
  .filterDate('2022-04-03', '2022-04-04')
  .filterBounds(Dheli);  // Intersecting ROI
```

* I can **reduce** the collection to a single image through taking the mean, median using the `imageCollection.reduce()` function...

```{r eval=FALSE}
var median = filtered.reduce(ee.Reducer.median());
// print the image info
print(median)
```


var img = ee.Image('COPERNICUS/S2_SR/20210109T185751_20210109T185931_T10SEG');



var dataset = ee.Image('LANDFIRE/Fire/MFRI/v1_2_0/CONUS');






var combined_img = ee.ImageCollection([img_1, img_2]).mosaic();


### Review questions 

